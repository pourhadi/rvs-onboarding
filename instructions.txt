RVS CTO/Co-Founder Exercise

Note that all RVS technical co-founders are able to hands on code in addition to hiring / managing engineers. This portion of the exercise is designed to assess your ability to code quickly and effectively. 

The other section of the exercise is designed to understand how you would think about building the product. 

Section 1 - User Onboarding Section

This should be the main page of your app. It should have fields for email and password and allow them to be submitted and persisted to the backend database. The onboarding flow should be structured similar to a "wizard"--such that the user is aware of where they are at in the overall onboarding flow. There should be three pages in the flow. The 2nd and 3rd pages are customizable via the admin section (see below). The three possible data "components" that can be added are:
* A large text area for an "About Me" section for the user
* An address collection set of form fieldsâ€“one of each for: street address, city, state, and zip
* A birthdate selection UI element

Section 2 - Admin Section

This is an admin UI to manage which data "components" appear on which page. Each of the 2nd and 3rd pages should always have at least one component on them, possibly two. Admins should be able to modify which page each component appears on. So they might select Birthdate and About Me for the 2nd page, then just address on the 3rd. For the initial configuration upon submission, each page should default to having at least one "component" on them. It does not matter which ones are set as the default. This section should be accessible via the "/admin" URL path of your app.

Section 3 - Data Table

This is simply an HTML table displaying the user data that is in the database. As the user navigates through the flow, if this page is refreshed, it should show the new user data that has been entered. It should not require authentication to access. It is purely for testing so we can see how the app is interacting with the backend database. This section should be accessible via the "/data" URL path of your app.

*Please deploy your submission online as a demo somewhere (Vercel, Render, Heroku, etc), or alternatively, record a demo video of it running in your local environment.*
Frequently Asked Questions

What frameworks am I allowed to choose for the frontend?

Please use some version or variation of React. React or NextJS are both perfectly fine to use.

What frameworks am I allowed to choose for the backend?

Any! While we will review your backend implementation, it can be written in any programming language and/or web framework of your choosing.

What types of databases am I allowed to use?

Something like PostgreSQL, MongoDB, MySQL, Supabase or Firebase are all perfectly fine to use. Please do not use the browser's LocalStorage feature, but rather implement some sort of "backend" that persists the user data to a database of some kind.

Does the Admin Section need to have the functionality to order the "components" on each page?

No! While this would be a great feature to have in practice, for the sake of time, it is not necessary to implement a UI to order the form "components" on each page.

What should happen if a user gets partially through the flow and leaves the website, then returns later?

Ideally, the user should be returned to their place in the form where they left off. This is only applicable to users who have actually submitted an email and password.

Should the Admin Section require authentication?

No! Please do not implement it. In a real-world scenario, of course this area of an app would be secured via login, but it is not necessary for this exercise.

Do I need to load a set of US state data into my app for the address state picker?

No, for the purposes of this exercise, this can be left as a free-form text field.

What if I have additional questions?

Please email Shanti (shantibraford@gmail.com) and cc Hannah (hannah@revolutionventurestudio.com)  with your questions.

